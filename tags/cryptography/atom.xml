<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - cryptography</title>
    <link href="https://nishantjoshi00.github.io/tags/cryptography/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://nishantjoshi00.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-05-20T00:00:00+00:00</updated>
    <id>https://nishantjoshi00.github.io/tags/cryptography/atom.xml</id>
    <entry xml:lang="en">
        <title>Handling Secure Boot</title>
        <published>2020-05-20T00:00:00+00:00</published>
        <updated>2020-05-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://nishantjoshi00.github.io/blog/college/handling-secure-boot/" type="text/html"/>
        <id>https://nishantjoshi00.github.io/blog/college/handling-secure-boot/</id>
        
        <content type="html">&lt;h1 id=&quot;handling-secure-boot&quot;&gt;Handling Secure Boot&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;what-is-secure-boot&quot;&gt;What is Secure Boot?&lt;&#x2F;h2&gt;
&lt;p&gt;Secure boot is a feature provided by many manufacturing companies, this feature is present inside the BIOS of your system. The prime goal of this feature is to check whether the bootloader that is being executed is safe (Key verified) of not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-do-self-signing&quot;&gt;Why do self-signing?&lt;&#x2F;h2&gt;
&lt;p&gt;Self-signing allows the user the sign manually which bootloaders are allowed to be executed, or to sign some binaries that you have created and you want to execute at boot time. It uses the MOK manager to adds the key as trusted signing agent. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-self-sign&quot;&gt;How to Self-sign&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Creating your own key, certificate to add&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ openssl req -new -x509 -newkey rsa:2048 -keyout MOK.key -out MOK.crt \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;	-nodes -days 3650 -subj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;CN: &amp;lt;Your Name&amp;gt;&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ openssl x509 -in MOK.crt -out MOK.cer
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &amp;lt;Your Name&amp;gt; : Enter your name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now there would be three files in the current folder &lt;code&gt;MOK.key, MOK.crt, MOK.cer&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here the &lt;strong&gt;MOK.key&lt;&#x2F;strong&gt; is very important and should be kept safe.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Importing the certificate into the MOK manager&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ sudo mokutil --import MOK.cer
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Here you would be prompted for a input password.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# This password has further uses so do not forget it
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here after, it depends on what you want to sign&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;signing-binaries&quot;&gt;Signing Binaries&lt;&#x2F;h3&gt;
&lt;p&gt;This is a low risk easy to perform task, go to the directory where the binaries are stored&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sbsign --key &#x2F;path&#x2F;to&#x2F;MOK.key --cert &#x2F;path&#x2F;to&#x2F;MOK.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;--output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ofilename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.efi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.efi
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Here the ofilename can be same as filename
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# filename is the file you want to sign
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;signing-kernel-modules&quot;&gt;Signing Kernel modules&lt;&#x2F;h3&gt;
&lt;p&gt;In alternative to signing binaries some times kernel modules can also cause the secure boot check to fail. Signing the kernel modules is as simple as signing any other binary.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ kmodsign sha512 MOK.key MOK.cer module.ko module.ko
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# here we are signing the module.ko using the MOK.key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;alternatives-to-self-signing&quot;&gt;Alternatives to self-signing&lt;&#x2F;h2&gt;
&lt;p&gt;Now, you must be wondering, are there any other alternatives to self signing, definitly!. But for thing alternatives you lose the freedom that is granted to you by the self-signing technique. The alternatives are &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;shim&lt;&#x2F;li&gt;
&lt;li&gt;PreLoader&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are other methods but shim it the one used in ubuntu to make it possible to boot into ubuntu even if the secure boot in on. i.e. because the ubuntu bootloader is signed by microsoft which grants to access to boot into the computer.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h4&gt;
&lt;p&gt;Please Do read this amazing blog post on&lt;&#x2F;p&gt;
&lt;p&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;nishantjoshi00.github.io&#x2F;blog&#x2F;college&#x2F;handling-secure-boot&#x2F;ubuntu.com&#x2F;blog&#x2F;how-to-sign-things-for-secure-boot&quot;&gt;how-to-sign-things-for-secure-boot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Done !!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Disk encryption using LUKS</title>
        <published>2020-05-05T00:00:00+00:00</published>
        <updated>2020-05-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://nishantjoshi00.github.io/blog/college/disk-encryption/" type="text/html"/>
        <id>https://nishantjoshi00.github.io/blog/college/disk-encryption/</id>
        
        <content type="html">&lt;h1 id=&quot;disk-encryption&quot;&gt;Disk Encryption&lt;&#x2F;h1&gt;
&lt;p&gt;Given below is a method of encrypting your hard-drive partition (SSD&#x2F;HDD) using luks encryption method, But this file system can only be recognised in a Linux Box and thus can only be decrypted in Linux. As the partition format is unrecognized in windows filesystem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;formatting-the-partition&quot;&gt;Formatting the Partition&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Here we are formatting the partition in &lt;strong&gt;LUKS&lt;&#x2F;strong&gt; (&lt;strong&gt;L&lt;&#x2F;strong&gt;inux &lt;strong&gt;U&lt;&#x2F;strong&gt;nified &lt;strong&gt;K&lt;&#x2F;strong&gt;ey &lt;strong&gt;S&lt;&#x2F;strong&gt;etup)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here we use &lt;code&gt;luksFormat&lt;&#x2F;code&gt; to create a encryption layer. On the partition. By doing so the partition will be completed formated so make sure it is a empty partition.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ cryptsetup luksFormat &#x2F;dev&#x2F;sdxY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here x is a alphabet, and Y is a number, which reperesent the block file for the Yth partition of disk x.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;initialise-luks-devices&quot;&gt;Initialise LUKS devices&lt;&#x2F;h2&gt;
&lt;p&gt;Here we use the &lt;code&gt;luksOpen&lt;&#x2F;code&gt; which temporarily disables the encryption layer.&lt;&#x2F;p&gt;
&lt;p&gt;This devices will then be available in &#x2F;dev&#x2F;mapper&#x2F;&lt;name&gt;&lt;&#x2F;p&gt;
&lt;p&gt;here &lt;name&gt; is a arbitrary value used to identify the block file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ cryptsetup luksOpen &#x2F;dev&#x2F;sdxY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;format-this-decrypted-device&quot;&gt;Format this decrypted device&lt;&#x2F;h2&gt;
&lt;p&gt;As &lt;strong&gt;luks&lt;&#x2F;strong&gt; acts as an encrypted wrapper over the underlying partition. we can use any &lt;code&gt;mkfs&lt;&#x2F;code&gt; cmd to format it. We can then normally mount it. This is done only after unlocking the encryption layer.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mounting-the-device&quot;&gt;Mounting the Device&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes connecting the device with a encrypted partition, automatically provokes a initialising and mounting procedure and prompts you to enter your password, in some Linux operating systems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The device can be mounted simply using the mount command&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ mount &#x2F;dev&#x2F;mapper&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mountpoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;re-encrypt-the-partition&quot;&gt;Re-Encrypt the partition&lt;&#x2F;h2&gt;
&lt;p&gt;Here the drive must be unmounted first, then perform a re-encryption using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ cryptsetup luksClose &#x2F;dev&#x2F;mapper&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;changing-the-password-of-the-partition&quot;&gt;Changing the Password of the partition&lt;&#x2F;h2&gt;
&lt;p&gt;This requires you to know the old password given to the partition.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ cryptsetup luksChangeKey &#x2F;dev&#x2F;sdxY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
